{"version":3,"sources":["components/Loader/Loader.jsx","components/Table/Table.jsx","components/PersonDetailsView/PersonDetailsView.jsx","components/ModeSelector/ModeSelector.jsx","utils/arraysOfChunk.js","components/TableSearch/TableSearch.jsx","App.js","index.js"],"names":["Loader","className","dataTable","data","onSort","sortType","sortField","onRowSelect","map","item","key","id","onClick","email","username","lastname","password","PersonDetailsView","row","ModeSelector","setMode","chunks","array","sizes","particlesArray","particles","Math","ceil","length","start","push","slice","TableSearch","onSearch","useState","value","setValue","onKeyDown","e","onChange","currentTarget","type","placeholder","App","mode","isLoading","setIsLoading","setData","sort","setSort","setSortField","setRow","currentPage","setCurrentPage","displayData","setDisplayData","search","setSearch","getDataFetch","a","fetch","response","json","useEffect","filteredData","filter","toLowerCase","includes","sortCol","cloneData","sortedData","orderBy","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","selected","containerClassName","activeClassName","forcePage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7e26fd05.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Loader.css'\r\n\r\nconst Loader = () => (\r\n  <div className='center'>\r\n    <div className=\"lds-ring\">\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Loader;","import React from 'react';\r\nimport './Table.css';\r\n\r\nexport default ({ data, onSort, sortType, sortField, onRowSelect }) => {\r\n  let dataTable;\r\n  if (data) {\r\n    dataTable = data.map(item => (\r\n      <tr key={item.id} className='subtitle' onClick={() => onRowSelect(item)}>\r\n        <td className='subtitleItem'>{item.id}</td>\r\n        <td className='subtitleItem'>{item.email}</td>\r\n        <td className='subtitleItem'>{item.username}</td>\r\n        <td className='subtitleItem'>{item.lastname}</td>\r\n        <td className='subtitleItem'>{item.password}</td>\r\n      </tr>\r\n    ));\r\n  } else {\r\n    dataTable = <tr><td>Совпадений не найдено.</td></tr>\r\n  }\r\n  return (\r\n    <table>\r\n      <thead>\r\n      <tr className='titleTable'>\r\n        <th className='titleItem' onClick={() => onSort('id')}>\r\n          id {sortField === 'id' && <small>{sortType === 'desc' ? '▲' : '▼'}</small>}\r\n        </th>\r\n        <th className='titleItem' onClick={() => onSort('email')}>\r\n          email {sortField === 'email' && <small>{sortType === 'desc' ? '▲' : '▼'}</small>}\r\n        </th>\r\n        <th className='titleItem' onClick={() => onSort('username')}>\r\n          username {sortField === 'username' && <small>{sortType === 'desc' ? '▲' : '▼'}</small>}\r\n        </th>\r\n        <th className='titleItem' onClick={() => onSort('lastname')}>\r\n          lastName {sortField === 'lastname' && <small>{sortType === 'desc' ? '▲' : '▼'}</small>}\r\n        </th>\r\n        <th className='titleItem' onClick={() => onSort('password')}>\r\n          password {sortField === 'password' && <small>{sortType === 'desc' ? '▲' : '▼'}</small>}\r\n        </th>\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      {dataTable}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}","import React from 'react';\r\nimport './PersonDetailsView.css'\r\n\r\n\r\nconst PersonDetailsView = ({row}) => (\r\n  <div className='row'>\r\n    Выбран пользователь: <b>{row.username}</b>\r\n    <br/>\r\n    Фамилия: <b>{row.lastname}</b>\r\n    <br/>\r\n    email: <b>{row.email}</b>\r\n  </div>\r\n);\r\n\r\nexport default PersonDetailsView;","import React from 'react';\r\nimport './ModeSelector.css';\r\n\r\nconst ModeSelector = ({setMode}) => (\r\n  <div className='loading'>\r\n    <button onClick={() => setMode('1000')}>1000 элементов</button>\r\n    <button onClick={() => setMode('32')}>32 элемента</button>\r\n  </div>\r\n);\r\n\r\nexport default ModeSelector;","export const chunks = (array, sizes) => {\r\n  const particlesArray = [];\r\n  let particles = Math.ceil(array.length / sizes);\r\n  let start = 0;\r\n  while (particles > 0) {\r\n    particlesArray.push(array.slice(start, start+sizes));\r\n    particles -= 1;\r\n    start += sizes;\r\n  }\r\n  return particlesArray;\r\n};\r\n\r\n","import React, { useState } from 'react';\r\n\r\nconst TableSearch = ({onSearch}) => {\r\n  \r\n  const [value, setValue] = useState('');\r\n  \r\n  return (\r\n    <div>\r\n      <input onKeyDown={(e) => onSearch(e, value)} value={value} onChange={e => setValue(e.currentTarget.value)} type=\"text\" placeholder='search...'/>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default TableSearch;","import React, { useEffect, useState, Fragment } from 'react';\nimport './App.css';\nimport Loader from './components/Loader/Loader';\nimport Table from './components/Table/Table';\nimport orderBy from 'lodash.orderby';\nimport PersonDetailsView from './components/PersonDetailsView/PersonDetailsView';\nimport ModeSelector from './components/ModeSelector/ModeSelector';\nimport ReactPaginate from 'react-paginate';\nimport { chunks } from './utils/arraysOfChunk';\nimport TableSearch from './components/TableSearch/TableSearch';\n\nconst App = () => {\n  const pageSize = 50;\n  const [mode, setMode] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [data, setData] = useState([]);\n  const [sort, setSort] = useState('asc');//desc\n  const [sortField, setSortField] = useState('id');\n  const [row, setRow] = useState(null);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [displayData, setDisplayData] = useState([]);\n  const [search, setSearch] = useState('');\n  \n  const getDataFetch = async () => {\n    setIsLoading(true);\n    const response = await fetch(`http://www.filltext.com/?rows=${mode}&id={index}&email={email}&lastname={lastName}&username={username}&password={randomString|5}&pretty=true`);\n    const data = await response.json();\n    setData(data);\n    setDisplayData(chunks(data, pageSize));\n    setIsLoading(false);\n  };\n  \n  \n  const onSort = sortCol => {\n    /*const cloneData = [...data];\n    const sortType = sort === 'asc' ? 'desc' : 'asc';\n    const sortedData = orderBy(cloneData, sortCol, sortType);\n    setData(sortedData);\n    setSort(sortType);\n    setSortField(sortCol);*/\n    const cloneData = [...displayData];\n    const sortType = sort === 'asc' ? 'desc' : 'asc';\n    const sortedData = orderBy(cloneData[currentPage], sortCol, sortType);\n    cloneData[currentPage] = [...cloneData[currentPage] = sortedData];\n    setDisplayData(cloneData);\n    setSort(sortType);\n    setSortField(sortCol); //Активная сортировка сортирует конкретную таблицу (та часть что в коммента сортирует всю\n    // таблицу целиком\n  };\n  \n  const pageChangeHandler = ({ selected }) => {\n    setCurrentPage(selected);\n  };\n  \n  const onRowSelect = item => {\n    setRow(item);\n  };\n  \n  useEffect(() => {\n    getDataFetch();\n  }, [mode]);\n  \n  useEffect(() => {\n    const filteredData = data.filter(item => {\n      return item.email.toLowerCase().includes(search.toLowerCase()) ||\n        item.username.toLowerCase().includes(search.toLowerCase())\n    });\n    setDisplayData(chunks(filteredData, pageSize));\n  }, [search]);\n  \n  /*useEffect(() => {\n    if (data.length !== 0) {\n      setIsLoading(false);\n      setDisplayData(chunks(data, pageSize));\n    }\n  }, [data]);*/ // данная часть относится к сортировке таблицы целиком\n  \n  const onSearch = (e, value) => {\n    if (e.key === 'Enter') {\n      setSearch(value);\n      setCurrentPage(0);\n    }\n  };\n  \n  if (!mode) {\n    return (\n      <div className='container'>\n        <ModeSelector setMode={setMode} />\n      </div>\n    )\n  }\n  \n  return (\n    <div className=\"container\">\n      {!isLoading\n        ? <Fragment>\n          <TableSearch onSearch={onSearch} />\n          <Table\n            data={displayData[currentPage]}\n            onSort={onSort}\n            sortType={sort}\n            sortField={sortField}\n            onRowSelect={onRowSelect}\n          />\n        </Fragment>\n        : <Loader />}\n      \n      {(data.length > pageSize && displayData.length !==0) &&\n      <ReactPaginate\n        previousLabel={'<'}\n        nextLabel={'>'}\n        breakLabel={'...'}\n        breakClassName={'break-me'}\n        pageCount={displayData.length}\n        marginPagesDisplayed={2}\n        pageRangeDisplayed={5}\n        onPageChange={pageChangeHandler}\n        containerClassName={'pagination'}\n        activeClassName={'active'}\n        forcePage={currentPage}\n      />}\n      \n      {row && <PersonDetailsView row={row} />}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}